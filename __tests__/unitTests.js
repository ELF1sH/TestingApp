import {multiply} from "../multiply.js";

test("Simple multiplication", () => {
    expect(multiply("15", "295")).toBe("4425")
})


test("Multiplication with second zero-argument", () => {
    expect(multiply("34545", "0")).toBe("0")
})
test("Multiplication with first zero-argument", () => {
    expect(multiply("0", "234255")).toBe("0")
})
test("Multiplication with both zero-arguments", () => {
    expect(multiply("0", "0")).toBe("0")
})


test("Multiplication with invalid symbols in first argument", () => {
    expect(() => {multiply("3f", "34")}).toThrow(Error('Invalid character'))
})
test("Multiplication with invalid symbols in second argument", () => {
    expect(() => {multiply("345", "654654353g")}).toThrow(Error('Invalid character'))
})
test("Multiplication with invalid symbols in both argument", () => {
    expect(() => {multiply("34y534", "43jk4g")}).toThrow(Error('Invalid character'))
})
test("Multiplication with completely invalid arguments", () => {
    expect(() => {multiply("Hello", "world!")}).toThrow(Error('Invalid character'))
})
test("Multiplication with floating point numbers", () => {
    expect(() => {multiply("34.234", "123")}).toThrow(Error('Invalid character'))
})
test("Multiplication with floating comma numbers", () => {
    expect(() => {multiply("34,234", "123")}).toThrow(Error('Invalid character'))
})


test("Huge numbers multiplication [timid attempt]", () => {
    expect(multiply("8162591832756298357698435634598265439856243985432531658356439285623985437256239845643754238",
        "4760329465980659827346543298564327562084397623895743089670326872430962347609346730694237609423603948674"))
        .toBe("38856626420242885133894068714962636031252810330947412625596948289493703102116268232098662046824748353463348158624929666081250627572817004045146310430108443694854399846006418933047494722421980412")
})
test("Huge numbers multiplication [bold attempt]", () => {
    expect(multiply
        "47603294659806598273465432985643275620843976238957430896703268724309623476093467306942376094236039486748162591832756298357698435634598265439856243985432531658356439285623985437256239845643754238476032946598065982734654329856432756208439762389574308967032687243096234760934673069423760942360394867481625918327562983576984356345982654398562439854325316583564392856239854372562398456437542384760329465980659827346543298564327562084397623895743089670326872430962347609346730694237609423603948674816259183275629835769843563459826543985624398543253165835643928562398543725623984564375423847603294659806598273465432985643275620843976238957430896703268724309623476093467306942376094236039486748162591832756298357698435634598265439856243985432531658356439285623985437256239845643754238"))
        .toBe("3885662642024288513389406871496263603125281033094741262559694828949370310211626823209866205071041099549429946255715452015939228242471367984556743120675171472900884743565147583556452716751777419656317572575441609562419342927446203050695541063071902833727418521344451555169997296706010452456505611014171905409681941407748984368986753058016452019798737914083692741024382296299367342127235748550420011007158220459863623701769351751857491935421346844758715750735161625183990428006259723289484635415931537663838856808221968180075661050396370946440432869901534758645569057609193293715210012925448466773526477671848686038506564541759994199518841354047892347526225713391891524347849975019682024353742683959633470163524384119264095034500961253851392473591159847585700041981175896825336162427963382668580357251786261004945968556467965244128695390162692346911438477895679679493305416627691209972256086641402075841971157324700047738222405786799195727064162824381164855284591450479165449670172274698559287265120485213789491137372331196384872596924604961629854241666150721449036705330756900998132341139808274852692130516268352892015927397760106522188574514747041204444168410176134624258870219564344515949260579064682462352910264940663651123940676709837807576486897752938379809022316267856487741203655441205676403081378826601651789447063774575812261130009465889242959673236072030105135176200714427368115582516354391678354196352907446632058365352283460244996534676856376841866460734291804199587533599009740845738942960644")
})


test("Multiplication with first negative argument", () => {
    expect(multiply("-3", "5")).toBe("-15")
})
test("Multiplication with second negative argument", () => {
    expect(multiply("15", "-295")).toBe("-4425")
})
test("Multiplication with both negative arguments", () => {
    expect(multiply("-23424324324", "-234242424")).toBe("5486970510215921376")
})


test("Multiplication with first argument starting with zeros", () => {
    expect(multiply("003", "5")).toBe("15")
})
test("Multiplication with second argument starting with zeros", () => {
    expect(multiply("15", "0295")).toBe("4425")
})
test("Multiplication with both arguments starting with zeros", () => {
    expect(multiply("0000000000000000000000015", "0000000000000000000000000000000000000295")).toBe("4425")
})